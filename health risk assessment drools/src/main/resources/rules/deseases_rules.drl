package com.sample

import com.healthriskassessment.model.Desease;
import com.healthriskassessment.dto.RiskDTO;
import com.healthriskassessment.dto.DeseaseDTO;
import java.util.List;
import java.util.Set;

/*
TODO 1. Srediti pravila - nasledjivanje gde moze - DONE :)
	 2. Dodati pravilo za MEDIUM desease risk - DONE :)
	 3. Ispraviti pravila da se poklapaju sa specifikacijom - DONE :)
	 4. Prioritet ne moze sa activation-group i salience da se sredi posto se pokrece isto pravilo
	 	za vise bolesti, srediti sve preko constraints - DONE :)
	 5. Jednostavniji, bolji model?
*/

rule "Find deseases"
	agenda-group "deseases"
    when
        $desease: Desease($deseaseRisks: risks, $deseaseName: name, $deseaseDescription: description)
        $healthData: HealthDataDTO($userRisks: risks)
        $deseaseRiskNames: List() from accumulate (
            Risk($name: name) from $deseaseRisks, collectList($name)
        )
        checkForDeseaseRisks($num, $matchingRisks, $deseaseRiskNames, $userRisks;)
    then
    	System.out.println("\nFind deseases fired for desease: " + $deseaseName);
    	DeseaseDTO deseaseDto = new DeseaseDTO($deseaseName, $deseaseDescription, null, $matchingRisks);
        $healthData.getDeseases().add(deseaseDto);
end

query checkForDeseaseRisks(Number $num, Set $matchingRisks,List deseaseRiskNames, List userRisks)
    $matchingRisks := Set(size > 0) from accumulate (
     	RiskDTO($risk: this, $name: riskName, riskName memberOf deseaseRiskNames) from userRisks,
     	collectSet($risk)
    )

end

// **************************************************************************
//						DESEASE AT RISK CLASSIFICATION
// **************************************************************************

rule "Desease classification"
	agenda-group "deseases"
	enabled false
	when
		$healthData: HealthDataDTO($deseases: deseases, $ds: deseases.size) @Watch(deseases)
		$deseaseAtRisk: DeseaseDTO(riskLevel == null, $deseaseName: deseaseName,
			$userDeseaseRisks: risks ) from $deseases // rizici prisutni kod user-a
		$desease: Desease(name == $deseaseName, $allDeseaseRisks: risks) // svi rizici za bolest
	then
end

rule "Desease at risk classification high risk" extends "Desease classification"
	agenda-group "deseases"
	when
		checkNumberOfRisks($allDeseaseRisks, $userDeseaseRisks;)
	then
	    System.out.println("\nDesease at risk classification high risk fired for: " + $deseaseName);
	    $deseaseAtRisk.setRiskLevel(RiskLevel.HIGH);
		//modify($healthData) { }
end

rule "Desease at risk classification high risk 2" extends "Desease classification"
	agenda-group "deseases"
	when
		checkNumberOfHighRisks($userDeseaseRisks, 1;)
	then
	    System.out.println("\nDesease at risk classification high risk 2 fired for: " + $deseaseName);
		$deseaseAtRisk.setRiskLevel(RiskLevel.HIGH);
		//modify($healthData) { }
end

rule "Desease at risk classification medium risk " extends "Desease classification"
	agenda-group "deseases"
	when	
        Number(intValue > 3) from $ds
        not checkNumberOfHighRisks($userDeseaseRisks, 1;)
		not checkNumberOfRisks($allDeseaseRisks, $userDeseaseRisks;)     
	then
	    System.out.println("\nDesease at risk classification medium risk fired for: " + $deseaseName);
		$deseaseAtRisk.setRiskLevel(RiskLevel.MEDIUM);
		//modify($healthData) { }
end

rule "Desease at risk classification low risk " extends "Desease classification"
	agenda-group "deseases"
	when	
        Number(intValue == 2 || intValue == 3) from $ds
        not checkNumberOfHighRisks($userDeseaseRisks, 1;)
		not checkNumberOfRisks($allDeseaseRisks, $userDeseaseRisks;)     
	then
	    System.out.println("\nDesease at risk classification low risk fired for: " + $deseaseName);
		$deseaseAtRisk.setRiskLevel(RiskLevel.LOW);
		//modify($healthData) { }
end

query checkNumberOfRisks(Set deseaseRisks, Set userRisks)

 	$deseaseRiskNames := List() from accumulate (
            Risk($name: name) from deseaseRisks, collectList($name)
        )
 
    $num := Number(intValue >= $deseaseRiskNames.size() - 1 ) from accumulate(
        RiskDTO($name: riskName, riskName memberOf $deseaseRiskNames) from userRisks,
        init(int count = 0;),
        action(count += 1;),
        result(count)
    )
end

query checkNumberOfHighRisks(Set userRisks, int lowerLimit)

 		$highRisks: Number(intValue > lowerLimit) from accumulate(
			RiskDTO(riskLevel == RiskLevel.HIGH) from userRisks,
        		init(int count = 0;),
        		action(count += 1;),
        		result(count)		
        )
end

rule "Test rule"
	agenda-group "desease classification"
	when
		$healthData: HealthDataDTO($ds: deseases.size)
		Number(intValue > 0) from $ds
	then
	    System.out.println("\nTest rule fired " + $ds);
end