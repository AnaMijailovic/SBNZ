package com.sample

import com.healthriskassessment.model.Disease;
import com.healthriskassessment.dto.UserRiskDTO;
import com.healthriskassessment.dto.UserDiseaseDTO;
import java.util.List;
import java.util.Set;


rule "Find diseases"
	agenda-group "diseases"
    when
        $disease: Disease($diseaseRisks: risks, $diseaseName: name, $diseaseDescription: description)
        $userData: UserDataDTO($diagnosedDiseases: diagnosedDiseases)
        $healthData: HealthDataDTO($userRisks: risks)
        Number(intValue == 0) from accumulate (
        	Object($name: this.toString(), this.toString() == $diseaseName) from $diagnosedDiseases,
        	count($name)
        ) 
        $diseaseRiskNames: List() from accumulate (
            Risk($name: name) from $diseaseRisks, collectList($name)
        )
        checkForDiseaseRisks($diseaseName, $num, $matchingRisks, $diseaseRiskNames, $userRisks;)
    then
    	System.out.println("\nFind diseases fired for disease: " + $diseaseName);
    	UserDiseaseDTO userDiseaseDTO = new UserDiseaseDTO($diseaseName, $diseaseDescription, null, $matchingRisks);
        $healthData.getDiseases().add(userDiseaseDTO);
end

query checkForDiseaseRisks(String diseaseName, Number $num, Set $matchingRisks, List diseaseRiskNames, List userRisks)

    $matchingRisks := Set(size > 0) from accumulate (
     	UserRiskDTO($risk: this, $name: riskName, riskName memberOf diseaseRiskNames || 
     	(riskName == diseaseName && "Family history" memberOf diseaseRiskNames)) from userRisks,
     	collectSet($risk)
    )

end

// **************************************************************************
//						DISEASE AT RISK CLASSIFICATION
// **************************************************************************

rule "Disease classification"
	agenda-group "diseases"
	enabled false
	when
		$healthData: HealthDataDTO($diseases: diseases, $ds: diseases.size) @Watch(diseases)
		$diseaseAtRisk: UserDiseaseDTO(riskLevel == null, $diseaseName: diseaseName,
			$userDiseaseRisks: risks ) from $diseases // all risks that the user has
		$disease: Disease(name == $diseaseName, $alldiseaseRisks: risks) // all risks that may affect this disease
	then
end

rule "Disease at risk classification high risk" extends "Disease classification"
	agenda-group "diseases"
	when
		checkNumberOfRisks($allDiseaseRisks, $userDiseaseRisks;)
	then
	    System.out.println("\nDisease at risk classification high risk fired for: " + $diseaseName);
	    $diseaseAtRisk.setRiskLevel(RiskLevel.HIGH);
		//modify($healthData) { }
end

// check if the user has all the risks that affect a disease / or one risk is missing
// desesaseRisks - all risks that may affect this disease
// userRisks - all risks that the user has and are related to this disease
query checkNumberOfRisks(Set diseaseRisks, Set userRisks)

 	$diseaseRiskNames := List() from accumulate (
            Risk($name: name) from diseaseRisks, collectList($name)
        )
 
    $num := Number(intValue >= $diseaseRiskNames.size() - 1 ) from accumulate(
        UserRiskDTO($name: riskName, riskName memberOf $diseaseRiskNames) from userRisks,
        init(int count = 0;),
        action(count += 1;),
        result(count)
    )
end

rule "Disease at risk classification high risk 2" extends "Disease classification"
	agenda-group "diseases"
	when
		checkNumberOfHighRisks($userDiseaseRisks, 2;)
	then
	    System.out.println("\nDisease at risk classification high risk 2 fired for: " + $diseaseName);
		$diseaseAtRisk.setRiskLevel(RiskLevel.HIGH);
		//modify($healthData) { }
end

// check the number of user risks for one disease marked as high risk
// userRisks - all risks that the user has and are related to one disease
query checkNumberOfHighRisks(Set userRisks, int lowerLimit)

 		$highRisks: Number(intValue > lowerLimit) from accumulate(
			UserRiskDTO(riskLevel == RiskLevel.HIGH) from userRisks,
        		init(int count = 0;),
        		action(count += 1;),
        		result(count)		
        )

end

rule "Disease at risk classification medium risk " extends "Disease classification"
	agenda-group "diseases"
	when	
        Number(intValue > 3) from $ds
        not checkNumberOfHighRisks($userDiseaseRisks, 1;)
		not checkNumberOfRisks($allDiseaseRisks, $userDiseaseRisks;)     
	then
	    System.out.println("\nDisease at risk classification medium risk fired for: " + $diseaseName);
		$diseaseAtRisk.setRiskLevel(RiskLevel.MEDIUM);
		//modify($healthData) { }
end

rule "Disease at risk classification low risk " extends "Disease classification"
	agenda-group "diseases"
	when	
        Number(intValue < 4) from $ds
        not checkNumberOfHighRisks($userDiseaseRisks, 2;)
		not checkNumberOfRisks($allDiseaseRisks, $userDiseaseRisks;)     
	then
	    System.out.println("\nDisease at risk classification low risk fired for: " + $diseaseName);
		$diseaseAtRisk.setRiskLevel(RiskLevel.LOW);
		//modify($healthData) { }
end
